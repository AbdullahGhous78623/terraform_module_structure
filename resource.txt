services:

  nodejs:
    build: .
    container_name: nodejs-app
    ports:
      - '3001:3000'
    depends_on:
      - mongodb
    environment:
      - MONGODB_URI=mongodb://mongodb:27017/transactionhistory
    networks:
      - monitoring-net

  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - '27017:27017'
    volumes:
      - ./data:/data/transactionhistory
    networks:
      - monitoring-net

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - '9090:9090'
    networks:
      - monitoring-net

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - '3000:3000'
    environment:
      - GF_SMTP_ENABLED=true
      - GF_SMTP_HOST=smtp.gmail.com:587
      - GF_SMTP_USER=clahantechnologies@gmail.com
      - GF_SMTP_PASSWORD=bxfa nght rqgi aekk
      - GF_SMTP_SKIP_VERIFY=true
      - GF_SMTP_FROM_ADDRESS=clahantechnologies@gmail.com
      - GF_SMTP_FROM_NAME=Grafana Alerts
    networks:
      - monitoring-net

networks:
  monitoring-net:
    driver: bridge




sqp_8cb1bbfe57345e73841bc15a2edbdaa880167cd9




pipeline {
    agent any

    tools {
        maven 'maven3'       // Must match Jenkins Global Tool Configuration
        jdk 'JAVA_HOME'      
    }

    environment {
        SCANNER_HOME = tool 'sonar'  
    }

    stages {
        stage('Git Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/Msocial123/Petclinic.git'
            }
        }

        stage('Compile Code') {
            steps {
                sh "mvn clean compile"
            }
        }

        stage('Code Test') {
            steps {
                sh "mvn test"
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonar') { 
                    sh """
                        "${SCANNER_HOME}/bin/sonar-scanner" \
                          -Dsonar.projectName=Abdullah-sonar-1 \
                          -Dsonar.projectKey=sonar-qube-analysis \
                          -Dsonar.sources=. \
                          -Dsonar.java.binaries=target/classes \
                          
                    """
                }
            }
        }
    }
}
docker run -d --name sonarqube -p 9000:9000 -e SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true sonarqube:lts
docker run -d --name sonar -p 9000:9000 sonarqube:community
docker ps


pipeline {
    agent any
    
    environment {
        SCANNER_HOME= tool 'sonar-scanner'
    }

    stages {
        stage('git checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/Msocial123/Transaction-History.git'
            }
        }
        
        stage('sonarqube analysis'){
            steps{
                withSonarQubeEnv('sonar') {
                  sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectKey=murali-proejct -Dsonar.projectName=murali-proejct '''
                 }
            }
        }
    }
}

sqp_edddc0879313d213c18309fa4813919a791dab14
sqp_d26516a30c31e95ff6df8b6e72592f924d420183

sudo apt-get update
sudo apt-get install -y dotnet-sdk-8.0
Github-token--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




 Components in the Diagram
1. Client

The Docker Client is what you (the user) interact with.

You use Docker CLI commands like:

docker run → Run a container from an image.

docker build → Build a new image from a Dockerfile.

docker pull → Pull (download) an image from a remote registry.

These commands don’t act directly; they are passed to the Docker Daemon.

2. Docker Host

This is the machine (server, VM, or EC2 instance) where Docker is running. It has key parts:

Docker Daemon (dockerd)

The “brain” of Docker.

Listens to commands from the Client.

Manages images, containers, volumes, and networks.

Images

Templates used to create containers.

Example: Python, Redis, custom apps.

Stored locally on the Docker Host.

Containers

Running instances of images.

They are lightweight, isolated environments.

Example: If you run the python image, it creates a Python container.

3. Registry

A Registry is a storage + distribution system for Docker images.

Examples: Docker Hub (public), or Private Registry (AWS ECR, GCP Artifact Registry).

Inside registry:

Images → Pre-built and stored for reuse. (Nginx, Ubuntu, PostgreSQL, etc. in the diagram).

You can push your own images there, or pull images to your host.


dckr_pat_fhw76NcsZo--P3ZLWANWJy1_q6w--docker token


 docker build -t login:v1 .
docker tag login:v1 abdullah78623/login:v1
docker login -u abdullah78623
docker push abdullah78623/login:v1
docker run -d --name login-app -p 80:80 login:v1
docker volumes command

yum install docker
    2  docker --version
    3  service docker start
    4  mkdir project
    5  cd project
    6  touch index.html home.html signup.html login.html
    7  ls
    8  cd ..
    9  ls
   10  docker run -it --name sample ubuntu /bin/bash
   11  docker ps
   12  docker ps -a
   13  docker start sample
   14  docker attach sample
   15  docker rm sample remove
   16  docker rm sample
   17  docker ps -a
   18  docker run -it
   19  docker run -it --name a2 -v /somyadeep ubuntu /bin/bash
   20  docker volume ls
   21  cd /var/lib/docker/volume
   22  cd /var/lib/docker/volumes
   23  ls
   24  cd
   25  b6090920341cdcf87939522f2dc895038b9bcee7607f750e85d52496f542914d
   26  b6090920341cdcf87939522f2dc895038b9bcee7607f750e85d52496f542914d
   27  cd
   28  b6090920341cdcf87939522f2dc895038b9bcee7607f750e85d52496f542914d
   29  cd b6090920341cdcf87939522f2dc895038b9bcee7607f750e85d52496f542914d
   30  cd b6090920341cdcf87939522f2dc895038b9bcee7607f750e85d52496f542914d
   31  pwd
   32  cd /
   33  pwd
   34  cd volume b6090920341cdcf87939522f2dc895038b9bcee7607f750e85d52496f542914d
   35  cd /var/lib/docker/volumes
   36  cd volume b6090920341cdcf87939522f2dc895038b9bcee7607f750e85d52496f542914d
   37  cd b6090920341cdcf87939522f2dc895038b9bcee7607f750e85d52496f542914d
   38  ls
   39  cd _data
   40  ls


docker run -it --name a4 -v myvolumedata:/dockerdata ubuntu /bin/bash

   43  docker volume ls

   44  cd /var/lib/docker/volumes

   45  ls

   46  cd myvolumedata

   47  ls

   48  cd _data

   49  ls

   50  cd /home/ec2-user

   51  docker run -it --name a5 --privileged=true --volume-from a4 ubuntu /bin/bash

   52  docker run -it --name a5 --privileged=true --volumes-from  a4 ubuntu /bin/bash
 

   54  dockr ps -a

   55  docker ps -a

   56  docker volume ls

   57  docker rm a4

   58  docker ps -a

   59  docker run -it --name a6 --privileged=true -v  myvolumedata

   60  docker run -it --name a6 --privileged=true -v myvolumedata:/sinchan ubuntu /bin/bash
 ls

   63  mkdir bindproject

   64  docker run -it --name a7 -v /home/ec2-user/bindproject:/devops ubuntu /bin/bash

   65  docker volume ls

   66  ls

   67  cd bindproject

   68  ls

   69  docker volume ls

   70  docker volume inspect myvolumedata

   71  cd ..

   72  exit
 cd /home/ec2-user

   92  pwd

   93  docker volume create --name customerdb

   94  docker volume ls

   95  docker volume inspect customerdb

   96  docker run -it -d --name web1 -v customerdb:/usr/share/nginx/html

   97  docker run -it -d --name web1 -v customerdb:/usr/share/nginx/html nginx

   98  docker exec web1 bash -c "echo 'allow from web1' /usr/share/nginx/html/index.html "

   99  docker exec web1 curl localhost

  100  docker exec web1 bash -c "echo 'allow from web1' > /usr/share/nginx/html/index.html "

  101  docker exec web1 curl localhost

  102  mkdir nginxvolume

  103  cd nginxvolume

  104  vi index.html

  105  vi index.html

  106  cat index.html

  107  nano Dockerfile

  108  docker build -t nginx-volume .

  109  docker run -d -it --name nginxweb -p 8080:80 -v $(pwd):/usr/share/nginx/html nginx-volume

  110  docker ps -a

  111  ls

  112  docker volume ls

  113  docker volume inspect customerdb

  114  cd /var/lib/docker/volumes/customerdb/_data

  115  ls

 






docker compose command

yum install docker -y
    2  service docker start
    3  docker ps -a
    4  curl -SL https://github.com/docker/compose/releases/download/v2.39.2/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose
    5  chmod +x /usr/local/bin/docker-compose
    6  docker compose --version
    7  ls
    8  mkdir test-compose
    9  cd test-compose/
   10  ls
   11  vi docker-compose.yaml
   12  docker-compose config
   13  docker-compose up
   14  docker-compose up -d
   15  docker ps -a
   16  ls
   17  cat docker-compose.yaml
   18  docker-compose ps
   19  docker ps -a
   20  docker-compose stop
   21  docker ps -a
   22  docker-compose start
   23  docker ps -a
   24  history

new compose file
services:

   db:

     image: mysql:5.7

     volumes:

       - db_data:/var/lib/mysql

     restart: always

     environment:

       MYSQL_ROOT_PASSWORD: somewordpress

       MYSQL_DATABASE: wordpress

       MYSQL_USER: wordpress

       MYSQL_PASSWORD: wordpress
 
   wordpress:

     depends_on:

       - db

     image: wordpress:latest

     ports:

       - "8000:80"

     restart: always

     environment:

       WORDPRESS_DB_HOST: db:3306

       WORDPRESS_DB_USER: wordpress

       WORDPRESS_DB_PASSWORD: wordpress

       WORDPRESS_DB_NAME: wordpress

volumes:

    db_data: {}
 98Ri/6hFxlFBEJO3PqiIbdEjZHwFoFEalkf4IQaG





